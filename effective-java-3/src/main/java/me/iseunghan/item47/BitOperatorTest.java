package me.iseunghan.item47;

import java.util.Collection;
import java.util.Set;

public class BitOperatorTest {
    public static void main(String[] args) {
        bit_operator();
    }

    /**
     * << 연산자: 쉽게 생각해서 a << b, a의 비트들을 b만큼 밀어내는 연산이다. 간단하게 생각해서 b만큼 맨오른쪽부터 0비트를 추가한다고 생각하면 됨 (ex. 1011 << 2 = 1011"00" -> "0" 두개 추가)
     * >> 연산자: 위와 동일한 개념이지만 방향만 다름. 왼쪽에서 오른쪽으로 비트를 밀어냄.
     * >> 연산자: 위와 동일한 개념이지만 방향만 다름. 왼쪽에서 오른쪽으로 비트를 밀어냄. (하지만 >>>는 무조건 양수로만 판단함)
     * &(and) 연산자: 비트가 둘 다 참일 때 1 (and 조건), (ex. 1011 & 0001 = 0001) 그래서 1과 비교하면 홀수인 숫자를 알아낼 수 있다. (비트 계산으로 속도 최적화)
     * |(or) 연산자: 비트가 하나라도 참일 때 1 (or 조건), (ex. 1011 | 0011 = 1011), 용도는..?
     * ^(xor) 연산자: 비트가 다를 때 1 (xor 조건), (ex. 1011 ^ 0011 = 1000), 용도는..?
     * ~(NOR) 연산자: 각 비트를 반대로 (not 조건), (ex. not 1001 = 0110)
     */
    public static void bit_operator() {
        // 맨 앞자리 비트는 부호를 나타낸다. (0: 양수, 1: 음수)
        System.out.printf("[%d: \t0%31s]%n", Integer.MAX_VALUE, Integer.toBinaryString(Integer.MAX_VALUE));
        System.out.printf("[%d: \t%32s]%n", Integer.MIN_VALUE, Integer.toBinaryString(Integer.MIN_VALUE));

        for (int i = 0; i < 15; i++) {
            System.out.printf("[%2d (%4s)] ------------------------------- %n", i, Integer.toBinaryString(i));
            System.out.printf("\t%2d(%4s) <<\t %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i << 1, Integer.toBinaryString(i << 1));
            System.out.printf("\t%2d(%4s) >>\t %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i >> 1, Integer.toBinaryString(i >> 1));
            System.out.printf("\t%2d(%4s) >>> %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i >>> 1, Integer.toBinaryString(i >>> 1));
            System.out.printf("\t%2d(%4s) &\t %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i & 1, Integer.toBinaryString(i & 1));
            System.out.printf("\t%2d(%4s) |\t %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i | 1, Integer.toBinaryString(i | 1));
            System.out.printf("\t%2d(%4s) ^\t %2d(%4s): %2d(%4s)%n", i, Integer.toBinaryString(i), 1, Integer.toBinaryString(1), i ^ 1, Integer.toBinaryString(i ^ 1));
            System.out.printf("\t~%2d(%4s):\t %2d(%4s)%n", i, Integer.toBinaryString(i), -i, Integer.toBinaryString(-i));
        }
    }

    /**
     * console log
     *
     * [2147483647: 	01111111111111111111111111111111]
     * [-2147483648: 	10000000000000000000000000000000]
     * [ 0 (   0)] -------------------------------
     * 	 0(   0) <<	  1(   1):  0(   0)
     * 	 0(   0) >>	  1(   1):  0(   0)
     * 	 0(   0) >>>  1(   1):  0(   0)
     * 	 0(   0) &	  1(   1):  0(   0)
     * 	 0(   0) |	  1(   1):  1(   1)
     * 	 0(   0) ^	  1(   1):  1(   1)
     * 	~ 0(   0):	  0(   0)
     * [ 1 (   1)] -------------------------------
     * 	 1(   1) <<	  1(   1):  2(  10)
     * 	 1(   1) >>	  1(   1):  0(   0)
     * 	 1(   1) >>>  1(   1):  0(   0)
     * 	 1(   1) &	  1(   1):  1(   1)
     * 	 1(   1) |	  1(   1):  1(   1)
     * 	 1(   1) ^	  1(   1):  0(   0)
     * 	~ 1(   1):	 -1(11111111111111111111111111111111)
     * [ 2 (  10)] -------------------------------
     * 	 2(  10) <<	  1(   1):  4( 100)
     * 	 2(  10) >>	  1(   1):  1(   1)
     * 	 2(  10) >>>  1(   1):  1(   1)
     * 	 2(  10) &	  1(   1):  0(   0)
     * 	 2(  10) |	  1(   1):  3(  11)
     * 	 2(  10) ^	  1(   1):  3(  11)
     * 	~ 2(  10):	 -2(11111111111111111111111111111110)
     * [ 3 (  11)] -------------------------------
     * 	 3(  11) <<	  1(   1):  6( 110)
     * 	 3(  11) >>	  1(   1):  1(   1)
     * 	 3(  11) >>>  1(   1):  1(   1)
     * 	 3(  11) &	  1(   1):  1(   1)
     * 	 3(  11) |	  1(   1):  3(  11)
     * 	 3(  11) ^	  1(   1):  2(  10)
     * 	~ 3(  11):	 -3(11111111111111111111111111111101)
     * [ 4 ( 100)] -------------------------------
     * 	 4( 100) <<	  1(   1):  8(1000)
     * 	 4( 100) >>	  1(   1):  2(  10)
     * 	 4( 100) >>>  1(   1):  2(  10)
     * 	 4( 100) &	  1(   1):  0(   0)
     * 	 4( 100) |	  1(   1):  5( 101)
     * 	 4( 100) ^	  1(   1):  5( 101)
     * 	~ 4( 100):	 -4(11111111111111111111111111111100)
     * [ 5 ( 101)] -------------------------------
     * 	 5( 101) <<	  1(   1): 10(1010)
     * 	 5( 101) >>	  1(   1):  2(  10)
     * 	 5( 101) >>>  1(   1):  2(  10)
     * 	 5( 101) &	  1(   1):  1(   1)
     * 	 5( 101) |	  1(   1):  5( 101)
     * 	 5( 101) ^	  1(   1):  4( 100)
     * 	~ 5( 101):	 -5(11111111111111111111111111111011)
     * [ 6 ( 110)] -------------------------------
     * 	 6( 110) <<	  1(   1): 12(1100)
     * 	 6( 110) >>	  1(   1):  3(  11)
     * 	 6( 110) >>>  1(   1):  3(  11)
     * 	 6( 110) &	  1(   1):  0(   0)
     * 	 6( 110) |	  1(   1):  7( 111)
     * 	 6( 110) ^	  1(   1):  7( 111)
     * 	~ 6( 110):	 -6(11111111111111111111111111111010)
     * [ 7 ( 111)] -------------------------------
     * 	 7( 111) <<	  1(   1): 14(1110)
     * 	 7( 111) >>	  1(   1):  3(  11)
     * 	 7( 111) >>>  1(   1):  3(  11)
     * 	 7( 111) &	  1(   1):  1(   1)
     * 	 7( 111) |	  1(   1):  7( 111)
     * 	 7( 111) ^	  1(   1):  6( 110)
     * 	~ 7( 111):	 -7(11111111111111111111111111111001)
     * [ 8 (1000)] -------------------------------
     * 	 8(1000) <<	  1(   1): 16(10000)
     * 	 8(1000) >>	  1(   1):  4( 100)
     * 	 8(1000) >>>  1(   1):  4( 100)
     * 	 8(1000) &	  1(   1):  0(   0)
     * 	 8(1000) |	  1(   1):  9(1001)
     * 	 8(1000) ^	  1(   1):  9(1001)
     * 	~ 8(1000):	 -8(11111111111111111111111111111000)
     * [ 9 (1001)] -------------------------------
     * 	 9(1001) <<	  1(   1): 18(10010)
     * 	 9(1001) >>	  1(   1):  4( 100)
     * 	 9(1001) >>>  1(   1):  4( 100)
     * 	 9(1001) &	  1(   1):  1(   1)
     * 	 9(1001) |	  1(   1):  9(1001)
     * 	 9(1001) ^	  1(   1):  8(1000)
     * 	~ 9(1001):	 -9(11111111111111111111111111110111)
     * [10 (1010)] -------------------------------
     * 	10(1010) <<	  1(   1): 20(10100)
     * 	10(1010) >>	  1(   1):  5( 101)
     * 	10(1010) >>>  1(   1):  5( 101)
     * 	10(1010) &	  1(   1):  0(   0)
     * 	10(1010) |	  1(   1): 11(1011)
     * 	10(1010) ^	  1(   1): 11(1011)
     * 	~10(1010):	 -10(11111111111111111111111111110110)
     * [11 (1011)] -------------------------------
     * 	11(1011) <<	  1(   1): 22(10110)
     * 	11(1011) >>	  1(   1):  5( 101)
     * 	11(1011) >>>  1(   1):  5( 101)
     * 	11(1011) &	  1(   1):  1(   1)
     * 	11(1011) |	  1(   1): 11(1011)
     * 	11(1011) ^	  1(   1): 10(1010)
     * 	~11(1011):	 -11(11111111111111111111111111110101)
     * [12 (1100)] -------------------------------
     * 	12(1100) <<	  1(   1): 24(11000)
     * 	12(1100) >>	  1(   1):  6( 110)
     * 	12(1100) >>>  1(   1):  6( 110)
     * 	12(1100) &	  1(   1):  0(   0)
     * 	12(1100) |	  1(   1): 13(1101)
     * 	12(1100) ^	  1(   1): 13(1101)
     * 	~12(1100):	 -12(11111111111111111111111111110100)
     * [13 (1101)] -------------------------------
     * 	13(1101) <<	  1(   1): 26(11010)
     * 	13(1101) >>	  1(   1):  6( 110)
     * 	13(1101) >>>  1(   1):  6( 110)
     * 	13(1101) &	  1(   1):  1(   1)
     * 	13(1101) |	  1(   1): 13(1101)
     * 	13(1101) ^	  1(   1): 12(1100)
     * 	~13(1101):	 -13(11111111111111111111111111110011)
     * [14 (1110)] -------------------------------
     * 	14(1110) <<	  1(   1): 28(11100)
     * 	14(1110) >>	  1(   1):  7( 111)
     * 	14(1110) >>>  1(   1):  7( 111)
     * 	14(1110) &	  1(   1):  0(   0)
     * 	14(1110) |	  1(   1): 15(1111)
     * 	14(1110) ^	  1(   1): 15(1111)
     * 	~14(1110):	 -14(11111111111111111111111111110010)
     */

}
